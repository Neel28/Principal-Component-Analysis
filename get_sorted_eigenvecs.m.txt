function [normX,mu,evec,eval] = get_sorted_eigenvecs(x)
% input:
%   X - N*D data matrix, each row as a data sample
%       You must assume that the data samples are not zero-mean, thus you need to perform 
%       data transformation on X to make sure that the samples have zero-mean (PCA algorithm assumption),
%       before performing eigenvalue-eigenvector decomposition.
%       You may use MATLAB built-in function 'eig' to perform eigenvalue-eigenvector decomposition.
% output:
%   eigenvecs: D*D matrix, normalized eigenvectors (with length=1) sorted based on its eigenvalue magnitude, 
%              with d-th column corresponds to eigenvector with the d-th biggest eigenvalue
%              (e.g. 1st column corresponds to eigenvector with the biggest eigenvalue,
%               2nd column corresponds to eigenvector with 2nd biggest eigenvalue, etc.)
%
% CSCI 567 2016 Spring, Homework 5
% (put your code here...)
[rows cols] = size(x);
% standardizing data
mu=mean(x);
%sigma=std(x);
normX = bsxfun(@minus, x, mu);
%normX = bsxfun(@rdivide, normX, sigma);

% calculating eigen value
[evec,eval]=pca(normX);

%{
%visualizing vectors
s=diag(eval);
drawLine(mu, mu + 1.5 * s(1,1) * evec(:,1)', '-k', 'LineWidth', 2);
hold on
drawLine(mu, mu + 1.5 * s(2,2) * evec(:,2)', '-k', 'LineWidth', 2);
hold off;
%}
end

function drawLine(p1, p2, varargin)
%DRAWLINE Draws a line from point p1 to point p2
%   DRAWLINE(p1, p2) Draws a line from point p1 to point p2 and holds the
%   current figure

plot([p1(1) p2(1)], [p1(2) p2(2)], varargin{:});

end











